<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\Auth;

class Notification extends Model
{
    use SoftDeletes;

    public $incrementing = false;
    protected $table = 'notifications';
    protected $guarded = [];

    protected $appends = ['seen'];
    protected $casts = ['data' => 'array'];
    protected $hidden = [
        'created_at', 'updated_at', 'deleted_at',
    ];


    protected static function boot()
    {
        parent::boot(); //  Change the autogenerated stub
        static::addGlobalScope('orderedBy', function (Builder $builder) {
            $builder->orderBy('notifications.ordered')->latest('notifications.updated_at');

        });

        if (request()->is('api/*')) {
            static::addGlobalScope('notDraft', function (Builder $builder) {
                $builder->where('notifications.draft', false);
            });
        }
    }

    public function notifiable()
    {
        return $this->morphTo();
    }

    public function recipient()
    {
        return $this->belongsTo(User::class, 'notifiable_id');
    }

    public function getTitleAttribute()
    {
        return optional(optional($this->data)['title'])[lang()];
    }

    public function getBodyAttribute()
    {
        return optional(optional($this->data)['body'])[lang()];

//        if (in_array($this->type, [NewOrderNotification::class, AcceptOrderNotification::class, ReadyOrderNotification::class,])) {
//            return notification_trans("Preparing the shipment and packing it before delivery");
////            return t($this->data["body"]    ,$this->data["details"]['param'] );
//        } else {
//            return $this->data['body'];
//        }
    }

    public function getSeenAttribute()
    {
        return $this->read_at;
    }

    public function scopeNotSeen($query)
    {
        return $query->whereNull('read_at');
    }

    public function getActionButtonsAttribute()
    {
        if (Auth::guard('manager')->check()) {
            $button = '';
            $button .= '<a href="' . route('manager.notification.show', $this->id) . '" class="btn btn-icon btn-danger "><i class="la la-eye"></i></a> ';
            $button .= '<button type="button" data-id="' . $this->id . '" data-toggle="modal" data-target="#notifyDeleteModel" class="notifyDeleteRecord btn btn-icon btn-danger"><i class="la la-trash"></i></button>';
            return $button;
        } elseif (Auth::guard('web')->check() && Auth::user()->type == 'vendor') {
            $button = '';
            $button .= '<a href="' . route('restaurant.notification.show', $this->id) . '" class="btn btn-icon btn-danger "><i class="la la-eye"></i></a> ';
            $button .= '<button type="button" data-id="' . $this->id . '" data-toggle="modal" data-target="#notifyDeleteModel" class="notifyDeleteRecord btn btn-icon btn-danger"><i class="la la-trash"></i></button>';
            return $button;
        } elseif (Auth::guard('web')->check() && Auth::user()->type == 'branch') {
            $button = '';
            $button .= '<a href="' . route('branch.notification.show', $this->id) . '" class="btn btn-icon btn-danger "><i class="la la-eye"></i></a> ';
            $button .= '<button type="button" data-id="' . $this->id . '" data-toggle="modal" data-target="#notifyDeleteModel" class="notifyDeleteRecord btn btn-icon btn-danger"><i class="la la-trash"></i></button>';
            return $button;
        }
    }
}
